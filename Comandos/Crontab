Crontab

O Cron permite que usuários Linux e Unix executem comandos ou scripts em uma determinada data e hora. Você pode agendar scripts para serem executados periodicamente. Cron é uma das ferramentas mais úteis em sistemas operacionais Linux ou UNIX. Geralmente é usado para tarefas de administrador de sistemas, como backups ou limpeza do diretório /tmp e muito mais. O serviço cron (daemon) é executado em segundo plano e verifica constantemente o arquivo /etc/crontab e os diretórios /etc/cron.*/. Ele também verifica o diretório /var/spool/cron/.

Você precisa usar o comando crontab para editar, criar, instalar, desinstalar ou listar os cron jobs. Cada usuário pode ter seu próprio arquivo crontab e, embora sejam arquivos em /var/spool/cron/crontabs, eles não devem ser editados diretamente. Você precisa usar o comando crontab para editar ou configurar seus próprios cron jobs.

Tipos de arquivos de configuração cron

Existem diferentes tipos de arquivos de configuração:

    1. O crontab do sistema UNIX/Linux: Normalmente, usado por serviços do sistema e tarefas críticas que requerem privilégios de root. O sexto campo (veja abaixo a descrição do campo) é o nome de um usuário para o qual o comando será executado. Isso dá ao crontab do sistema a capacidade de executar comandos como qualquer usuário.
    
    2. O usuário crontabs: O usuário pode instalar seus próprios cron jobs usando o comando crontab. O sexto campo é o comando a ser executado e todos os comandos são executados como o usuário que criou o crontab
    
Nota: Este faq apresenta implementações cron escritas por Paul Vixie e incluídas em muitas distribuições Linux e sistemas semelhantes ao Unix, como na popular 4ª edição BSD. A sintaxe é compatível com várias implementações de crond.

Como faço para instalar, criar ou editar meus próprios cron jobs?

Para editar ou criar seu próprio arquivo crontab, digite o seguinte comando no prompt do shell UNIX/Linux:

crontab -e

Devo reiniciar o cron após alterar o arquivo crontable?

Não. O Cron examinará o tempo de modificação em todos os crontabs e recarregará aqueles que foram alterados. Portanto, o cron não precisa ser reiniciado sempre que um arquivo crontab é modificado.

Sintaxe do crontab (descrição do campo)

A sintaxe é:

1 2 3 4 5 /path/to/command arg1 arg2

ou
1 2 3 4 5 /root/backup.sh

Onde

    • 1: Minute (0-59) 
    • 2: Hours (0-23) 
    • 3: Day (0-31) 
    • 4: Month (0-12 [12 == December]) 
    • 5: Day of the week(0-7 [7 or 0 == sunday]) 
    • /path/to/command – Script or command name to schedule 
    
Fácil de lembrar o formato

* * * * * command to be executed
- - - - -
| | | | |
| | | | ----- Day of week (0 - 7) (Sunday=0 or 7)
| | | ------- Month (1 - 12)
| | --------- Day of month (1 - 31)
| ----------- Hour (0 - 23)
------------- Minute (0 - 59)

Seu cron job é o seguinte para jobs do sistema:

1 2 3 4 5 USERNAME /path/to/command arg1 arg2

ou
1 2 3 4 5 USERNAME /path/to/script.sh

Exemplo: execute o script do cron job de backup

Se você deseja que um script denominado /root/backup.sh seja executado todos os dias às 3 da manhã, sua entrada no crontab será semelhante à seguinte. Primeiro, instale seu cronjob executando o seguinte comando:

crontab -e

Adicione

0 3 * * * /root/backup.sh

Salve e feche

Mais exemplos

Para executar /path/to/command cinco minutos depois da meia-noite, todos os dias, digite:
5 0 * * * /path/to/command

Execute /path/to/script.sh às 14h15 do primeiro dia de cada mês, digite:
15 14 1 * * /path/to/script.sh

Execute /scripts/phpscript.php às 22h nos dias de semana, digite:
0 22 * * 1-5 /scripts/phpscript.php

Execute /root/scripts/perl/perlscript.pl 23 minutos após a meia-noite, 2h, 4h ..., todos os dias, digite:
23 0-23 / 2 * * * /root/scripts/perl/perlscript.pl

Execute /path/to/command às 5 após 4 de cada domingo, digite:
5 4 * * sun /path/to/command

Como faço para usar operadores?

Um operador permite especificar vários valores em um campo. Existem três operadores:
    1. O asterisco (*): Este operador especifica todos os valores possíveis para um campo. Por exemplo, um asterisco no campo hora hora seria equivalente a cada hora ou um asterisco no campo mês seria equivalente a cada mês.
    2. A vírgula (,): Este operador especifica uma lista de valores, por exemplo: "1,5,10,15,20, 25".
    3. O traço (-): Este operador especifica uma faixa de valores, por exemplo: "5-15" dias, que é equivalente a digitar "5,6,7,8,9,…., 13,14,15 "Usando o operador vírgula.
    4. O separador (/): Este operador especifica um valor de etapa, por exemplo: "0-23/" pode ser usado no campo de horas para especificar a execução do comando a cada duas horas. Etapas também são permitidas após um asterisco, portanto, se quiser dizer a cada duas horas, use */2.

Como desativo a saída de e-mail?

Por padrão, a saída de um comando ou script (se houver) será enviado por e-mail para sua conta de e-mail local. Para parar de receber a saída de e-mail do crontab, você precisa acrescentar>/dev/null 2>&1. Por exemplo:

0 3 * * * /root/backup.sh >/dev/null 2>&1

Para enviar a saída para uma conta de e-mail em particular, digamos vivek@nixcraft.in você precisa definir a variável MAILTO da seguinte maneira

MAILTO="vivek@nixcraft.in"
0 3 * * * /root/backup.sh >/dev/null 2>&1

Tarefa: Liste todos os seus cron jobs
Digite o seguinte comando:

crontab -l
crontab -u username -l

Para remover ou apagar todos os trabalhos crontab, use o seguinte comando:
# Exclua os cron jobs atuais #

crontab -r

Exclua o trabalho para um usuário específico. Deve ser executado como usuário root

crontab -r -u username

Use string especial para economizar tempo

Em vez dos primeiros cinco campos, você pode usar qualquer uma das oito strings especiais. Isso não apenas economizará seu tempo, mas também aumentará a legibilidade.

String especial		Significado

@reboot				Run once, at startup.
@yearly				Run once a year, “0 0 1 1 *”.
@annually			(same as @yearly)
@monthly			Run once a month, “0 0 1 * *”.
@weekly				Run once a week, “0 0 * * 0”.
@daily				Run once a day, “0 0 * * *”.
@midnight			(same as @daily)
@hourly				Run once an hour, “0 * * * *”.

Exemplos

Rodar o ntpdate a cada hora
@hourly /path/to/ntpdate

Rodar o backup todo dia
@daily /path/to/backup/script.sh

Mais sobre o arquivo /etc/crontab e os diretórios /etc/cron.d/*

/etc/crontab é um arquivo crontab do sistema. Normalmente usado apenas pelo usuário root ou daemons para configurar trabalhos de todo o sistema. Todos os usuários individuais devem usar o comando crontab para instalar e editar seus trabalhos conforme descrito acima. /var/spool/cron/ ou 
/var/cron/tabs/ é o diretório para arquivos crontab pessoais do usuário. Deve ser feito backup com o diretório inicial dos usuários.

Noções básicas sobre /etc/crontab padrão

Entradas típicas do arquivo /etc/crontab:

SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=root
HOME=/

# run-parts
01 * * * * root run-parts /etc/cron.hourly
02 4 * * * root run-parts /etc/cron.daily
22 4 * * 0 root run-parts /etc/cron.weekly
42 4 1 * * root run-parts /etc/cron.monthly

Primeiro, o ambiente deve ser definido. Se a linha do shell for omitida, o cron usará o padrão, que é sh. Se a variável PATH for omitida, nenhum padrão será usado e as localizações dos arquivos precisarão ser absolutas. Se HOME for omitido, o cron usará o diretório inicial dos usuários de chamada.

Além disso, o cron lê os arquivos no diretório /etc/cron.d/. Normalmente, o daemon do sistema como sa-update ou sysstat coloca seu cronjob aqui. Como um usuário root ou superusuário, você pode usar os seguintes diretórios para configurar tarefas cron. Você pode soltar seus scripts diretamente aqui. O comando run-parts executa scripts ou programas em um diretório por meio do arquivo /etc/crontab:

Directory			Description
/etc/cron.d/ 		Put all scripts here and call them from /etc/crontab file. 
/etc/cron.daily/	Run all scripts once a day
/etc/cron.hourly/ 	Run all scripts once an hour
/etc/cron.monthly/ 	Run all scripts once a month
/etc/cron.weekly/	Run all scripts once a week

Como faço para usar os diretórios acima para colocar meus próprios scripts ou trabalhos?

Aqui está um script de shell de amostra chamado clean.cache. Este script é criado para limpar arquivos em cache a cada 10 dias. Este script é criado diretamente no diretório /etc/cron.daliy/. Em outras palavras, crie um arquivo de texto chamado /etc/cron.daily/clean.cache da seguinte maneira.

#!/bin/bash
# A sample shell script to clean cached file from lighttpd web server
CROOT="/tmp/cachelighttpd/"
 
# Clean files every $DAYS
DAYS=10
 
# Web server username and group name
LUSER="lighttpd"
LGROUP="lighttpd"
 
# Okay, let us start cleaning as per $DAYS
/usr/bin/find ${CROOT} -type f -mtime +${DAYS} | xargs -r /bin/rm
 
# Failsafe 
# if directory deleted by some other script just get it back 
if [ ! -d $CROOT ]
then 
        /bin/mkdir -p $CROOT
        /bin/chown ${LUSER}:${LGROUP} ${CROOT}
fi

Salve e feche e ajuste as permissões

chmod +x /etc/cron.daily/clean.cache

Como faço backup das entradas de cron jobs instaladas?

Basta digitar o seguinte comando para fazer backup de seus cronjobs em um servidor NAS montado no diretório /nas01/backup/cron/users.root.bakup:

crontab -l > /nas01/backup/cron/users.root.bakup
crontab -u userName -l > /nas01/backup/cron/users.userName.bakup

arquivo de registro de tarefas crond e cron

Você pode usar os comandos abaixo para visualizar o arquivo de log crond. Por exemplo, em um CentOS 7 Linux on pode usar os seguintes comandos:

cat /var/log/cron
tail -f /var/log/cron
grep "my-script.sh"
tail -f /var/log/cron

Descubra se os trabalhos de backup diários estão em execução ou não no servidor FreeBSD Unix:

sudo grep '/usr/local/bin/rsnapshot daily' /var/log/cron

Numa distribuição Linux moderna, pode-se usar o comando systemctl ou o comando journalctl:

sudo systemctl status cron
sudo journalctl -u cron
sudo journalctl -u cron | grep backup-script.sh

Leia as man pages
run-parts(8)

Referências

https://www.cyberciti.biz/faq/how-do-i-add-jobs-to-cron-under-linux-or-unix-oses/

=============
CRONTAB – o agendador de tarefas do linux
4 de janeiro de 2012 By Ubuntu Dicas 15 Comentários

por Rodolfo Silveira

Olá pessoal, estou aqui de volta fazendo um pequeno tutorial sobre o crontab o agendador de tarefas do Linux, lembrando que o crontab existe em qualquer versão do linux.

Com o crontab é possivel especificar horários como “todos os dias ás 5 da manhã” ou “a cada meia hora”, “de dez em dez minutos”.

Para a maioria das tarefas pouco importa a hora que vai ocorrer mas sim a frequência em que ela vai ser executada, como diariamente ou semanalmente. Para isso já existe 4 diretórios especiais, que basta o administrador botar o script lá dentro, eles já serão executados na periodicidade desejada.

/etc/cron.daily diário
/etc/cron.hourly a cada hora
/etc/cron.monthly mensal
/etc/cron.weekly semanal

Mas caso você mesmo queira fazer um periodo especifico, com hora e tudo mais, basta editar o arquivo:
/etc/crontab

Então vamos lá. Escolha um editor de sua escolha, no meu caso o VIM e abra um terminal e digite:

sudo vim /etc/crontab

Notem no conteúdo:

# /etc/crontab: system-wide crontab
# Unlike any other crontab you don't have to run the `crontab'
# command to install the new version when you edit this file
# and files in /etc/cron.d. These files also have username fields,
# that none of the other crontabs do.

SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

# m h dom mon dow user command
17 * * * * root cd / && run-parts --report /etc/cron.hourly
25 6 * * * root test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.daily )
47 6 * * 7 root test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.weekly )
52 6 1 * * root test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.monthly )
#

Notem que já existe algumas entradas justamente dos diretórios especiais, para adicionar sua própria tarefa temos que seguir o seguinte padrão de linha:

minuto hora diadomês mês diadasemana usuário comando

Notem que para cada espaço, se avança um campo e os campos seguem o padrão existente que conhecemos, por exemplo no campo mês não pode ter 15 pois temos de 1-12 e o campo da semana usamos de 0 a 7 onde zero e 7 é domingo 1 é segunda-feira, 2 terça-feira e assim por diante.

Temos também alguns caracteres que facilitam a vida:
Caractere 	Exemplo 	Siginificado
Hífen 	2-4 	intervalo de 2 a 4
virgula 	2,4,6,8 	os números 2,4,6 e 8
barra 	*/10 	de dez em dez
asterisco 	* 	todas as opções possiveis
Vamos botar a mão na massa:

Imagine que temos uma rotina de backup que comprime o o /home e o /var/log e queremos que esta rotina aconteça diariamente as 23:35;

Se usarmos o tar por exemplo, poderíamos usar duas linhas de comando ou não, por isso recomendo que crie um script e no arquivo do CRON nós vamos apontar para o script.
Criando o script:


    vim /scriptbkp.sh

O conteúdo do script, onde comprime a pasta home e a pasta log no hd externo de modo que o nome do arquivo fique com a data do dia da execução e ainda criando um arquivo de log localizado no /scriptbkplog.log para posterior análise:


    #!/bin/sh
    tar -cvzf /media/hdexterno/bkphome$(date +%Y_%m_%d).tar.gz /home >> /scriptbkplog.log
    tar -cvzf /media/hdexterno/bkplog$(date +%Y_%m_%d).tar.gz /var/log >> /scriptbkplog.log

Salve e saia.

Vamos dar permissão de execução também:


    sudo chmod 755 /scriptbkp.sh

Agora vamos lá no crontab:


    sudo vim /etc/crontab

Adicione a seguinte linha:


    35 23 * * * root sh /scriptbkp.sh

Salve e saia. Pronto, todos os dias da semana, todos os meses, todos os dias do mês, na hora 23 e minuto 35 ele vai executar o script e enviar o backup para o hd externo do exemplo.

Mas e se quisermos a atividade de segunda e sabado as 09:27. A linha ficará assim:


    27 09 * * 1,6 root sh /scriptbkp.sh

Se quisermos toda hora, de 08 as 18 de segunda a sexta:


    00 8-18 * * 1-5 root sh /scriptbkp.sh

Se quisermos fazer mensalmente independente da hora, feche o crontab e mova o arquivo para a pasta especial, com o seguinte comando:


    sudo mv /scriptbkp.sh /etc/cron.monthly

FIM! Se tiverem dúvida podem entrar em contato valeu!

Rodolfo Silveira
@rodolfo_tec
e-mail: ro_dolfo14@hotmail.com

Crédito
https://www.ubuntudicas.com.br/2012/01/crontab-o-agendador-de-tarefas-do-linux/


Agendando tarefas em Linux/Unix usando o cron
Autor: Ricardo Souza Silveira <rikrdosilveira at gmail.com>
Data: 27/03/2008

Cron - Resumo e introdução


Resumo: Este artigo trás informações sobre o comando cron. Alguns comandos e parâmetros que poderão ser utilizados também estarão citados neste artigo, assim como alguns exemplos de como poderá ser utilizado.

Abstract: This article back information on the command cron. Some command and parameters that could be used also will be cited in this article as well as some examples of how it may be used.

Introdução
O cron é uma ferramenta de sistemas Linux e Unix que permite a execução de comandos ou programas, agendados para um determinado dia/mês/ano/hora.

Para demonstrar melhor a utilidade de comando cron no Linux, suponhamos que por questões de segurança você precisa fazer um backup de alguns arquivos de uma aplicação, que é acessada por clientes diariamente. Neste caso você poderá utilizar o cron para fazer esse backup automaticamente em horários programados.

Como utilizar o cron
O agendamento das tarefas é feita através do arquivo de configuração localizado no diretório /etc/crontab ou em arquivos de usuários localizados em /var/spool/cron/crontabs/[nome do usuário].

Para adicionar uma tarefa ao cron é preciso que você abra com um editor de texto qualquer (se estiver usando interface gráfica Gnome, e se tiver instalado, poderá utilizar o gedit, ou se e estiver em moda caracter o vim ,vim, nano, pipe como preferir) o arquivo /etc/crontab e agendar, definindo o mês/dia/hora em que o comando devera ser executado. Para que a ferramenta cron funcione não é necessário reiniciá-la.

Para que o agendamento funcione é necessário que siga um padrão, um formato ao qual deve se respeitar. Veja o exemplo abaixo:

[minutos] [horas] [dias do mês] [mês] [dias da semana] [usuário] [comando]


31  18   1 *  *  root run-parts --report /etc/cron.montly
|    |   | |  |    |    |
|    |   | |  |    |     \_Comando que será executado
|    |   | |  |    |
|    |   | |  |     \_ UID que executará o comando
|    |   | |  |
|    |   | |  \_ Dia da semana (0-7)
|    |   | |
|    |   |  \_ Mês (1-12)
|    |   |
|    |    \_ Dia do Mês (1-31)
|    |
|     \_ Hora (0-23)
|
\_ Minuto (0-59)

Onde corresponde:

Exemplo:

Executar todos os dias, as 0 horas, 0 minutos, todo dia da semana como root o comando backup
0 0 * * * root /usr/local/bin/backup --report 


Outras considerações
Na opção que corresponde ao dia da semana pode ser utilizado as 3 primeiras letras em inglês (SUN,MON,TUE,WED,THU,FRI,SAT).

Você pode executar tarefas de hora em hora, diariamente, semanalmente e mensalmente, simplesmente colocando seus arquivos dento dos diretório respectivos /etc/cron.hourly, /etc/cron.daily, /etc/cron.weekly e /cron.monthly.

Veja um exemplo: dentro de "/etc/cron.daily/" tenho um arquivo backup, onde tenho o script de backup do meu sistema, ou seja, no meu caso ele ira fazer backup todos os dias as 12:20. Obs.: é necessário que esse arquivo tenha permissão para execução, e para isso basta executar o comando: "chmod +x /etc/cron.daily/backup".

Os campos que não for se importar, pode ser colocado um "*", como se tivesse selecionado "todas as possibilidades", sendo que podem ser colocado "-" (hífen) para determinar os intervalos de execução. A "," (vírgula) define uma lista valores, lista de opções com os números (1,3,5).

O arquivo que é gerado pelo cron em no diretório do usuário '/var/spool/cron/crontabs/[usuário]' pelo crontab tem o mesmo formato do /etc/crontab, exceto por não possuir o campo 'usuário (UID)', pois o nome do arquivo já identifica o usuário no sistema.

Caso você queira editar um arquivo de usuário feito pelo cron, basta utilizar o comando "crontab -e", ele irá abrir o que foi agendado para aquele usuário.

Cuidado, caso você edite o "crontab", certifique-se para que haja uma linha em branco no final do arquivo, caso esta linha não exista o ultimo comando não se executará. E tenha multa atenção ao colocar qualquer texto após o programa que será executado será considerado comentário e não será interpretado pelo cron.


Alguns exemplos de comandos


Para rodar todo dia de hora em hora:

00 * * * * script

Para rodar de dez em dez minutos todos os dias:

00-59/10 * * * * script

Note a divisão por 5 do intervalo 00-59.

Para rodar uma seqüência de horas:

20 10,12,16,18,22 * * * script

Para rodar numa seqüência de dias do mês às 14:00:

00 14 03-15 * * script

Para rodar ao meio-dia e a meia-noite de terça a sábado:

00 00, 12 * * 2-6 script

Para enviar um e-mail as 20:20 no dia 23/03 para Pedro dizendo "Viva o Linux porque nós amamos a liberdade!":

20 20 23 3 * root echo "Viva o Linux porque nós amamos a liberdade!"|mail Pedro

Conclusão
Com a utilização da ferramenta cron, concluí que no agendamento de tarefas em sistemas Linux/Unix pode ser feito perfeitamente com o comando cron, sendo um ferramenta fácil de implementar. É ótima para fazer backup automáticos, agendamento de tarefas diárias economizando tempo e trabalho repetitivos.

Referências
1. Agendando tarefas e rotinas com o Cron:
http://www.guiadohardware.net/dicas/agendando-tarefas-rotinas-cron.html
Acessado pela última vez no dia 05/03/2008 às 14:00 horas

2. Usando cron e crontab para agendar tarefas
http://www.infowester.com/linuxcron.php
Acessado pela última vez no dia 05/03/2008 às 14:30 horas

3. Utilizando o crontab
http://www.devin.com.br/eitch/crontab/
Acessado pela última vez no dia 05/03/2008 às 15:30 horas

4. Crontab
http://pt.wikipedia.org/wiki/Crontab
Acessado pela última vez no dia 05/03/2008 às 15:45 horas 

https://www.vivaolinux.com.br/artigos/impressora.php?codigo=7965

